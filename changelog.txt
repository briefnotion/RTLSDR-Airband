V 0.11A_220622
  - Made changes to API to put tighter control over the Command Send and Command 
      Receive channels.
  - Airband can now receive Frequency Hold, Skip, and Clear all commands from the 
      API.
  - The corrosponding versions are:
      RasFLED (V 0.93A_220622) <==> rtl_airband (V 0.11A_220622)

V 0.10A_220609
  - Started adding channel control routines.

V 0.09A_220609
  - Improving API Communication.
  - Receiving an "OFF" command, through the API, from RasFLED is 
      now successful in shutting down the radio without calling a system command.

  - RasFLED (V 0.89A_220609) <==> rtl_airband (V 0.09A_220609)

V 0.08A_220606
  - Improving API Communication.

V 0.07A_220605
  - Changed the way the api works again in an attept to find clean 
      communication.
  - The corrosponding versions are:
    RasFLED (V 0.87A_220605) <==> rtl_airband (V 0.07A_220605)

V 0.06A_220603
  - Attempting to clear memory on program shutdown.
      Exit code not implementd.
  - The corrosponding versions are:
    RasFLED (V 0.85A_220603) <==> rtl_airband (V 0.06A_220603)

V 0.06A_220602
  - rtl_airband supports labels for each frequency in the .conf file.
    The following line was added after the freqs = ... line.
    
    labels = ("CTAF","LAFAYETTE GROUND","UNICOM","LAFAYETTE APPROACH","LAFAYETTE DEPARTURE" );

    My forked version of rtl_airband will now communicate and display the 
    labels to RasFLED Radio Channel gadget.

  - The corrosponding versions are:
      RasFLED (V 0.84A_220602) <==> rtl_airband (V 0.06A_220602)
      
      RasFLED:      https://github.com/briefnotion/RasFLED
      rtl_airband:  https://github.com/briefnotion/RTLSDR-Airband

V 0.05A_220531
  - Some things changed.

V 0.04A_220522
  - Spent the better part of a day coding an api via file transfer.
  - Spent the better part of the next day getting a basic understanding 
      of shared memory regions.
  - Spent the better part of the next day trying to initialize shared 
      memory region variables in the header portion of a class variable. 
      I was unsucessful and the way these functions are called is new 
      to me. 
  - The API to RasFLED is working and sending, with scan option only, 
      Frequency, Signal Level, Noise Level, Signal Outside of Filter, 
      and, Channel open status.
  - the boost library 1.74.0 , from boost.org is and will from now on, 
      be referenced.  I was avoiding pulling in, or including in any way,  
      more libraries to avoid the problems associated to required dependancies. 
      I've decided to reference boost libraries because of the programmer 
      community's excelent reviews, and the variety of useful functions provided. 
  
V 0.03A_220521
  - Split and renamed a few libraries.  I will try to make the api.h as
      as portable as possible because the same api base will be needed 
      in RasFLED.  
  - I still think my time could be better spent building a prostetic arm,  
      but, I was given a radio, not motors and relays. 

V 0.02A_220520
  - Included fled_time.h
  - Introducing libboost-all-dev-1.74.0.3+b1 c++ libraries. 
  - Modified rasapi and added functions.
  - Started working on framework of airbandapi.h
  - Modified CMakeLists.txt to accept boost library for compile.

V 0.01A_220519
  - Brought in my rasapi.h library from RASFled.
  - Created an airbandapi.h library.
  - Put in a few lines of code, compiled, and ran, to see how the 
      program would behave.